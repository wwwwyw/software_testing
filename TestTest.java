// Generated by Selenium IDE
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;

import java.io.*;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;

public class TestTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;

  //转换数据格式
  public String getValue(XSSFCell xssfRow) {

    if (xssfRow.getCellType() == xssfRow.CELL_TYPE_BOOLEAN) {
      return String.valueOf(xssfRow.getBooleanCellValue());
    } else if (xssfRow.getCellType() == xssfRow.CELL_TYPE_NUMERIC) {
      return String.valueOf(xssfRow.getNumericCellValue());
    } else {
      return String.valueOf(xssfRow.getStringCellValue());
    }
  }

  public TestTest() throws IOException {
  }


  @Before
  public void setUp() {
    System.setProperty("webdriver.gecko.driver", "/Users/perfect/Documents/geckodriver");

    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void test() throws IOException {
    driver.get("http://103.120.226.190/selenium-demo/git-repo");
    driver.manage().window().setSize(new Dimension(721, 693));
    File file=new File("/Users/perfect/Desktop/Test20/src/Selenium+Lab2020.xlsx");
    InputStream is = new FileInputStream(file);
    XSSFWorkbook xssfWorkbook = new XSSFWorkbook(is);
    // 获取每一个工作薄
    for (int numSheet = 0; numSheet < xssfWorkbook.getNumberOfSheets(); numSheet++) {
      XSSFSheet xssfSheet = xssfWorkbook.getSheetAt(numSheet);
      if (xssfSheet == null) {
        continue;
      }
      // 获取当前工作薄的每一行
      for (int rowNum = 0; rowNum <20; rowNum++) {
        XSSFRow xssfRow = xssfSheet.getRow(rowNum);
        if (xssfRow != null) {
          //读取第一列数据
          //读取第二列数据
          XSSFCell one = xssfRow.getCell(1);
          XSSFCell two = xssfRow.getCell(2);
          driver.findElement(By.name("user_number")).click();
          driver.findElement(By.name("user_number")).sendKeys(getValue(one));
          driver.findElement(By.name("password")).click();
          driver.findElement(By.name("password")).sendKeys(getValue(two));
          driver.findElement(By.cssSelector(".btn")).click();
          String norm=driver.findElement(By.cssSelector("form > div:nth-of-type(5) > code")).getText();
          assertEquals(getValue(two),norm);
        }
      }
    }


  }
}
